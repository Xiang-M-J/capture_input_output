
import 'dart:math';
import 'dart:typed_data';

import 'package:capture_input_ouput/utils/cutils.dart';
import 'package:capture_input_ouput/utils/type_converter.dart';

List<double> window = [ 0.0, 0.024541229009628296, 0.049067676067352295, 0.0735645666718483, 0.0980171412229538, 0.12241067737340927, 0.1467304676771164, 0.1709618866443634, 0.19509032368659973, 0.21910123527050018, 0.24298018217086792, 0.2667127549648285, 0.290284663438797, 0.3136817514896393, 0.3368898630142212, 0.3598950505256653,
  0.3826834261417389, 0.40524131059646606, 0.4275550842285156, 0.4496113359928131, 0.4713967442512512, 0.49289819598197937, 0.5141027569770813, 0.5349976420402527, 0.5555702447891235, 0.5758081674575806, 0.5956993103027344, 0.6152315735816956, 0.6343932747840881, 0.6531728506088257, 0.6715589761734009, 0.6895405650138855,
  0.7071067690849304, 0.7242470979690552, 0.7409511208534241, 0.7572088241577148, 0.7730104327201843, 0.7883464097976685, 0.803207516670227, 0.8175848126411438, 0.8314695954322815, 0.8448535799980164, 0.8577286005020142, 0.8700869679450989, 0.8819212913513184, 0.89322429895401, 0.903989315032959, 0.91420978307724,
  0.9238795042037964, 0.9329928159713745, 0.9415440559387207, 0.949528157711029, 0.9569403529167175, 0.9637760519981384, 0.9700312614440918, 0.9757021069526672, 0.9807852506637573, 0.9852776527404785, 0.9891765117645264, 0.9924795627593994, 0.9951847195625305, 0.9972904324531555, 0.9987954497337341, 0.99969881772995,
  1.0, 0.99969881772995, 0.9987954497337341, 0.9972904324531555, 0.9951847195625305, 0.9924795627593994, 0.9891765117645264, 0.9852776527404785, 0.9807852506637573, 0.9757021069526672, 0.9700312614440918, 0.9637760519981384, 0.9569403529167175, 0.949528157711029, 0.9415440559387207, 0.9329928159713745,
  0.9238795042037964, 0.91420978307724, 0.903989315032959, 0.89322429895401, 0.8819212913513184, 0.8700869679450989, 0.8577286005020142, 0.8448535799980164, 0.8314695954322815, 0.8175848126411438, 0.803207516670227, 0.7883464097976685, 0.7730104327201843, 0.7572088241577148, 0.7409511208534241, 0.7242470979690552,
  0.7071067690849304, 0.6895405650138855, 0.6715589761734009, 0.6531728506088257, 0.6343932747840881, 0.6152315735816956, 0.5956993103027344, 0.5758081674575806, 0.5555702447891235, 0.5349976420402527, 0.5141027569770813, 0.49289819598197937, 0.4713967442512512, 0.4496113359928131, 0.4275550842285156, 0.40524131059646606,
  0.3826834261417389, 0.3598950505256653, 0.3368898630142212, 0.3136817514896393, 0.290284663438797, 0.2667127549648285, 0.24298018217086792, 0.21910123527050018, 0.19509032368659973, 0.1709618866443634, 0.1467304676771164, 0.12241067737340927, 0.0980171412229538, 0.0735645666718483, 0.049067676067352295, 0.024541229009628296,
];

void testQmf(){
  List<int> frame  = List.generate(512, (i) => i * 20);
  List<int> wav = [];
  for(var i = 0; i < 4; i++){
    List<int> low = qmf(frame.sublist(i * 128, (i+1) * 128), 128, true);
    wav.addAll(low);
  }
  print(wav.length);
  print(wav);
  printFilterState();
}
int frameSize = 128;
int freqDim = 65;
List<List<double>> specReshape(List<double> data){
  List<List<double>> spec = [];
  List<double> real = [];
  List<double> imag = [];
  for(var i = 0; i< freqDim * 2; i+=2){
    real.add(data[i]);
    imag.add(data[i+1]);
  }
  spec.add(real);
  spec.add(imag);
  return spec;
}

List<double> specRevReshape2(List<List<double>> data){

  List<double> fullData = List.filled(2 * frameSize, 0.0);
  fullData[0] = data[0][0];
  fullData[1] = data[1][0];
  fullData[2*freqDim - 2] = data[0][freqDim - 1];
  fullData[2*freqDim - 1] = data[1][freqDim - 1];

  for (var i = 1; i < freqDim - 1; i++){
    fullData[2 * i] = data[0][i];
    fullData[2 * i + 1] = data[1][i];
    fullData[2 * ( 2 * freqDim - 2 - i)] = data[0][i];
    fullData[2 * (2 * freqDim - 2 - i) + 1] = - data[1][i];
  }

  return fullData;
}

void testSTFT(){
  List<double> win = [];
  int frameSize = 128;
  for(var i = 0; i< frameSize;i++){
    win.add((0.5 * (1 - cos(2 * pi * i / (frameSize)))));
  }
  List<double> wavs = List.generate(128, (i) => i / 128);

  List<double> feature = stft(wavs, win, frameSize);
  List<List<double>> rf = specReshape(feature);

  // List<List<List<double>>> feats = [];
  // for (var i = 0; i<7; i++){
  //   List<double> feature = stft(wavs.sublist(i * 64, i * 64 + 128), win, frameSize);
  //   List<List<double>> rf = specReshape(feature);
  //   feats.add(rf);
  // }
  List<double> feat = specRevReshape2(rf);
  List<double> w = istft(feat, win, frameSize);
  // List<double> rw = [];
  // for(var i = 0; i < 7; i++){
  //   List<double> feat = specRevReshape2(feats[i]);
  //   List<double> w = istft(feat, win, frameSize);
  //   rw.addAll(w);
  // }
  // for(var i = 0; i < 256; i+=2){
  //   print("${feat[i]} + ${feat[i+1]}j");
  // }
  for(var i = 0; i < 128; i++){
    print((w[i] - wavs[i])/ w[i]);
  }
  // print(feats);
}