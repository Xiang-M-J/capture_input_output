plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.capture_input_ouput"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    // 解决下面这个错误
    // Execution failed for task ':app:mergeDebugNativeLibs'.
    //> A failure occurred while executing com.android.build.gradle.internal.tasks.MergeNativeLibsTask$MergeNativeLibsTaskWorkAction
    packagingOptions {
        pickFirst 'lib/x86/libonnxruntime.so'
        pickFirst 'lib/x86_64/libonnxruntime.so'
        pickFirst 'lib/armeabi-v7a/libonnxruntime.so'
        pickFirst 'lib/arm64-v8a/libonnxruntime.so'
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.capture_input_ouput"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
dependencies {
    implementation 'com.microsoft.onnxruntime:onnxruntime-android:1.20.0'
}

task copyMergedNativeLibs(type: Copy){
    from "../../native-libs/libs/"
    include "*/*.so"
    into "../../build/app/intermediates/merged_native_libs/debug/out/lib/"
}

//task copyMergedNativeLibs2(type: Copy){
//    from "../../native-libs/libs/"
//    include "*/*.so"
//    into "../../build/app/intermediates/merged_native_libs/release/out/lib/"
//}

task copyStrippedNativeLibs(type: Copy){
    from "../../native-libs/libs/"
    include "*/*.so"
    into "../../build/app/intermediates/merged_native_libs/debug/out/lib/"
}

//task copyStrippedNativeLibs2(type: Copy){
//    from "../../native-libs/libs/"
//    include "*/*.so"
//    into "../../build/app/intermediates/merged_native_libs/release/out/lib/"
//}

task preReleaseBuildTask{

    delete fileTree(dir: '../../build/app/intermediates/flutter/release/flutter_assets/assets', include: '*.onnx')
    copy{
        from ("../../native-libs/libs/")
        include ("*/*.so")
        into ("../../build/app/intermediates/merged_native_libs/release/out/lib/")
    }
    copy{
        from ("../../native-libs/libs/")
        include ("*/*.so")
        into ("../../build/app/intermediates/merged_native_libs/release/out/lib/")
    }
}

task cleanTempFiles(type: Delete) {
    delete fileTree(dir: '../../build/app/intermediates/flutter/debug/flutter_assets/assets', include: '*.onnx')
}

preBuild.dependsOn copyMergedNativeLibs
preBuild.dependsOn copyStrippedNativeLibs
preBuild.dependsOn cleanTempFiles

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn preReleaseBuildTask
    }
}
